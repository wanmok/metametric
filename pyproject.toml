[tool.ruff]
line-length = 120
src = ["src", "tests"]

select = [
    "E", # pycodestyle
    "F", # pyflakes
    "UP", # pyupgrade
    "D", # pydocstyle
]
ignore = [
    "D102", # Missing docstring in public method
    "D107", # Missing docstring in `__init__`
]

fixable = ["ALL"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
lines-after-imports = 2

[tool.black]
line-length = 119

[tool.pyright]
include = ["src", "tests"]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]

[tool.poetry]
name = "metametric"
version = "0.1.0a1"
description = "A Unified View of Evaluation Metrics for Structured Prediction"
authors = ["Tongfei Chen <tongfei@pm.me>", "Yunmo Chen <yunmo@jhu.edu>"]
readme = "README.md"
homepage = "https://omnuy.me/metametric"
repository = "https://github.com/wanmok/metametric"
packages = [{ include = "metametric", from = "src" }]

[tool.poetry.dependencies]
python = ">=3.9,<3.13"
scipy = "^1.11.2"
numpy = "^1.25.2"
torchmetrics = { version = "^1.1.2", optional = true }

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.2"
pyright = "^1.1.327"
ruff = "^0.0.290"
networkx = "^3.1"
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.2"

[tool.poetry.extras]
torchmetrics = ["torchmetrics"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
