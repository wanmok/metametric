[tool.ruff]
line-length = 120
src = ["src", "tests"]

lint.select = [
    "E", # pycodestyle
    "F", # pyflakes
    "UP", # pyupgrade
    "D", # pydocstyle
]
lint.ignore = [
    "D102", # Missing docstring in public method
    "D107", # Missing docstring in `__init__`
]

lint.fixable = ["ALL"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.black]
line-length = 119

[tool.pyright]
include = ["src", "tests"]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]

[tool.poetry]
name = "metametric"
version = "0.2.0"
description = "A Unified View of Evaluation Metrics for Structured Prediction"
authors = ["Tongfei Chen <tongfei@pm.me>", "Yunmo Chen <yunmo@jhu.edu>", "Will Gantt <wgantt.iv@gmail.com>"]
readme = "README.md"
homepage = "https://omnuy.me/metametric"
repository = "https://github.com/wanmok/metametric"
packages = [{ include = "metametric", from = "src" }]

[tool.poetry.dependencies]
python = ">=3.10"
scipy = "^1.14.0"
numpy = "^1.25.2"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.2"
pyright = "^1.1.385"
networkx = "^3.1"
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.2"
mkdocstrings = {extras = ["python"], version = "^0.23.0"}
ruff = "^0.7.0"

[tool.poetry.extras]
torchmetrics = ["torchmetrics"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D100", "D103", "F841"]
